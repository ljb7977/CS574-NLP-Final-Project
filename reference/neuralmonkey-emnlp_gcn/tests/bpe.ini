;; Small training test

[main]
name="translation with lazy datasets and bpe"
tf_manager=<tf_manager>
output="tests/outputs/bpe"
overwrite_output_dir=True
batch_size=16
epochs=2
train_dataset=<train_data>
val_dataset=<val_data>
trainer=<trainer>
runners=[<runner_1>,<runner_2>]
evaluation=[("target", <bleu>), ("target_greedy", "target", <bleu>)]
val_preview_num_examples=5
val_preview_input_series=["source", "target", "target_bpe"]
val_preview_output_series=["target_greedy"]
logging_period=20
validation_period=60
train_start_offset=500
runners_batch_size=5
test_datasets=[<val_data>,<val_data_no_target>]

[tf_manager]
class=tf_manager.TensorFlowManager
num_threads=4
num_sessions=1

[bleu]
class=evaluators.bleu.BLEUEvaluator

[train_data]
class=dataset.load_dataset_from_files
s_source="tests/data/train.tc.en"
s_target="tests/data/train.tc.de"
preprocessors=[("source", "source_bpe", <bpe_preprocess>), ("target", "target_bpe", <bpe_preprocess>)]
lazy=True

[val_data]
class=dataset.load_dataset_from_files
s_source="tests/data/val.tc.en"
s_target="tests/data/val.tc.de"
preprocessors=[("source", "source_bpe", <bpe_preprocess>), ("target", "target_bpe", <bpe_preprocess>)]

[val_data_no_target]
class=dataset.load_dataset_from_files
s_source="tests/data/val.tc.en"
preprocessors=[("source", "source_bpe", <bpe_preprocess>)]

[bpe_preprocess]
class=processors.bpe.BPEPreprocessor
merge_file="tests/data/merges_100.bpe"


[bpe_postprocess]
class=processors.bpe.BPEPostprocessor


[bpe_vocabulary]
class=vocabulary.from_bpe
path="tests/data/merges_100.bpe"


[encoder]
class=encoders.sentence_encoder.SentenceEncoder
name="sentence_encoder"
rnn_size=7
max_input_len=10
embedding_size=11
dropout_keep_prob=0.5
attention_type=decoding_function.Attention
data_id="source_bpe"
vocabulary=<bpe_vocabulary>


[decoder]
class=decoders.decoder.Decoder
name="decoder"
encoders=[<encoder>]
embedding_size=9
use_attention=True
dropout_keep_prob=0.5
data_id="target_bpe"
max_output_len=10
vocabulary=<bpe_vocabulary>

[trainer]
; This block just fills the arguments of the trainer __init__ method.
class=trainers.cross_entropy_trainer.CrossEntropyTrainer
decoders=[<decoder>]
l2_weight=1.0e-8
clip_norm=1.0
optimizer=<adadelta>

[adadelta]
class=config.utils.adadelta_optimizer
epsilon=1.0e-6
rho=0.95

[runner_1]
class=runners.rnn_runner.RuntimeRnnRunner
decoder=<decoder>
output_series="target"
postprocess=<bpe_postprocess>
beam_size=3

[runner_2]
class=runners.runner.GreedyRunner
decoder=<decoder>
postprocess=<bpe_postprocess>
output_series="target_greedy"
